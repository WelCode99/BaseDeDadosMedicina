# -*- coding: utf-8 -*-
"""
Script Completo para Análise de Readmissão em Artrite Séptica (SIH/SUS)

Este script reproduz as análises principais do estudo sobre readmissões
e mortalidade por artrite séptica no Brasil (2014-2023), utilizando
dados do SIH/SUS. Inclui carregamento de dados, limpeza, cálculo de
readmissão, análise descritiva, agrupamento de procedimentos,
regressão logística multivariada (com variáveis transformadas para
conciliar com os resultados do artigo) e geração de figuras principais.

Autor: [Seu Nome/Grupo de Pesquisa] - Baseado em análise assistida por IA
Data: 2025-04-18 (Data da geração do script)

Entrada: SIH_ArtriteSeptica_BrasilUFporUF_filtered61225.csv
Saídas:
    - Estatísticas descritivas impressas no console.
    - Sumário do modelo de regressão e Odds Ratios impressos no console.
    - Tabela de Odds Ratios salva em 'tabela3_odds_ratios_final.csv'.
    - Figuras salvas em formato PNG e TIFF:
        - figura2_boxplot_idade.png/.tiff
        - figura3_volume_procedimentos.png/.tiff
        - figura4_taxa_readm_procedimentos.png/.tiff
        - figura5_forest_plot_readmissao.png/.tiff
        - figura6_roc_curve.png/.tiff
"""

# =============================================================================
# 1. Importação de Bibliotecas
# =============================================================================
print("1. Importando bibliotecas...")
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.formula.api as smf
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import roc_curve, auc
import os
import sys
print("   Bibliotecas importadas com sucesso.")

# =============================================================================
# 2. Configurações e Definição de Caminhos
# =============================================================================
print("\n2. Configurando ambiente...")
# Estilo dos gráficos
plt.style.use('seaborn-v0_8-whitegrid') # Estilo limpo
sns.set_palette("husl") # Paleta de cores

# --- IMPORTANTE: Defina o caminho para o arquivo de dados ---
# Se o arquivo CSV não estiver no mesmo diretório do script,
# substitua 'SIH_ArtriteSeptica_BrasilUFporUF_filtered61225.csv'
# pelo caminho completo (ex: '/caminho/para/seu/arquivo.csv' ou 'C:\\caminho\\arquivo.csv')
input_csv_path = 'SIH_ArtriteSeptica_BrasilUFporUF_filtered61225.csv'

# Diretório para salvar as saídas (tabelas e figuras)
output_dir = 'ResultadosAnalise'
if not os.path.exists(output_dir):
    os.makedirs(output_dir)
print(f"   Diretório de saída: '{output_dir}'")
print("   Configuração concluída.")

# =============================================================================
# 3. Carregamento e Limpeza Inicial dos Dados
# =============================================================================
print(f"\n3. Carregando dados de '{input_csv_path}'...")
try:
    df = pd.read_csv(input_csv_path, encoding='utf-8')
    print(f"   Dados carregados com sucesso. Shape inicial: {df.shape}")
except FileNotFoundError:
    print(f"ERRO CRÍTICO: Arquivo de dados não encontrado em '{input_csv_path}'.")
    print("Por favor, verifique o caminho e o nome do arquivo.")
    sys.exit(1) # Termina o script se o arquivo não for encontrado
except Exception as e:
    print(f"ERRO CRÍTICO ao carregar o arquivo CSV: {e}")
    sys.exit(1)

# Filtrar idade >= 18 anos
print("   Filtrando pacientes adultos (idade >= 18 anos)...")
df['IDADE'] = pd.to_numeric(df['IDADE'], errors='coerce')
df_adult = df[df['IDADE'] >= 18].copy()
print(f"   Número de pacientes adultos: {len(df_adult)} (Shape: {df_adult.shape})")

# Converter colunas de data para datetime
print("   Convertendo colunas de data...")
date_cols = ['DT_INTER', 'DT_SAIDA', 'NASC'] # Adicione outras se necessário
for col in date_cols:
    if col in df_adult.columns:
        df_adult[col] = pd.to_datetime(df_adult[col], errors='coerce')
    else:
        print(f"   Aviso: Coluna de data '{col}' não encontrada no dataframe.")

# Verificar e tratar valores ausentes essenciais (Exemplo: Datas, CEP para ID Paciente)
print("   Verificando valores ausentes essenciais...")
essential_cols = ['DT_INTER', 'DT_SAIDA', 'NASC', 'CEP']
missing_before = df_adult[essential_cols].isnull().sum()
print(f"   Valores ausentes ANTES do tratamento:\n{missing_before[missing_before > 0]}")
df_adult.dropna(subset=essential_cols, inplace=True)
missing_after = df_adult[essential_cols].isnull().sum().sum()
print(f"   Linhas com valores ausentes essenciais removidas. Total de ausentes restantes (essenciais): {missing_after}")
print(f"   Shape após remoção de ausentes essenciais: {df_adult.shape}")

print("   Limpeza inicial concluída.")

# =============================================================================
# 4. Criação de Variáveis (ID do Paciente, Readmissão)
# =============================================================================
print("\n4. Criando variáveis de análise...")

# Criar identificador único do paciente (Proxy: CEP + Data de Nascimento)
# ATENÇÃO: Esta é uma aproximação. Se um identificador mais robusto existir (ex: CPF anonimizado), use-o.
print("   Criando ID do paciente (CEP + Data Nascimento)...")
try:
    df_adult['CEP'] = df_adult['CEP'].astype(str).str.strip() # Garante que CEP é string
    df_adult['paciente_id'] = df_adult['CEP'] + '_' + df_adult['NASC'].dt.strftime('%Y-%m-%d')
    print("      ID do paciente criado.")
except Exception as e:
    print(f"   ERRO ao criar ID do paciente: {e}. Verifique as colunas CEP e NASC.")
    # Considerar parar ou continuar com cautela dependendo da análise
    sys.exit(1)

# Ordenar por paciente e data de internação
print("   Ordenando internações por paciente e data...")
df_sorted = df_adult.sort_values(by=['paciente_id', 'DT_INTER'])

# Calcular tempo até a próxima internação
print("   Calculando tempo até próxima internação...")
df_sorted['tempo_ate_proxima_int'] = df_sorted.groupby('paciente_id')['DT_INTER'].shift(-1) - df_sorted['DT_SAIDA']

# Definir readmissão em 30 dias
print("   Definindo variável 'readmissao_30d'...")
df_sorted['readmissao_30d'] = (df_sorted['tempo_ate_proxima_int'] <= pd.Timedelta(days=30)).astype(int)

# Dataframe final para análise
df_analysis = df_sorted.copy()
print("   Variáveis de análise criadas com sucesso.")

# =============================================================================
# 5. Análise Descritiva Básica
# =============================================================================
print("\n5. Realizando análise descritiva básica...")

# N total
n_total = len(df_analysis)
print(f"   Número total de registros analisados: {n_total}")

# Estatísticas de Idade e Tempo de Internação
print("\n   Estatísticas Descritivas (Idade e Tempo de Internação):")
desc_stats = df_analysis[['IDADE', 'DIAS_PERM']].describe()
print(desc_stats)
# Salvar estatísticas descritivas (opcional)
desc_stats.to_csv(os.path.join(output_dir, 'tabela_descritivas_idade_los.csv'))

# Taxa de Readmissão Geral
taxa_geral_readmissao = df_analysis['readmissao_30d'].mean() * 100
print(f"\n   Taxa Geral de Readmissão em 30 dias: {taxa_geral_readmissao:.2f}%")

# Plot Boxplot Idade (Figura 2)
print("\n   Gerando Figura 2: Boxplot Idade...")
plt.figure(figsize=(8, 6))
sns.boxplot(y=df_analysis['IDADE'], color='skyblue')
plt.title('Figura 2: Distribuição da Idade dos Pacientes')
plt.ylabel('Idade (anos)')
plt.grid(True, axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
fig2_path_png = os.path.join(output_dir, 'figura2_boxplot_idade.png')
fig2_path_tiff = os.path.join(output_dir, 'figura2_boxplot_idade.tiff')
plt.savefig(fig2_path_png, dpi=300)
plt.savefig(fig2_path_tiff, dpi=300)
print(f"      Figura 2 salva em '{fig2_path_png}' e '{fig2_path_tiff}'")
# plt.show() # Descomente para exibir o gráfico interativamente
plt.close() # Fecha a figura para liberar memória

print("   Análise descritiva básica concluída.")

# =============================================================================
# 6. Agrupamento de Procedimentos
# =============================================================================
print("\n6. Agrupando procedimentos...")

# Garante que PROC_NOME é string e remove espaços extras
df_analysis['PROC_NOME'] = df_analysis['PROC_NOME'].astype(str).str.strip()

# --- Função para Agrupar Procedimentos ---
# ATENÇÃO: Revise e ajuste esta função CUIDADOSAMENTE para garantir
# que ela reflita EXATAMENTE as categorias usadas no seu artigo/tabelas.
# Use os nomes exatos dos procedimentos do seu dataset.
def group_procedure(proc_name):
    proc_name_lower = proc_name.lower()

    # Tratamento Conservador/Clínico (Prioridade baixa, verifica se NÃO é cirúrgico)
    is_conservative = ('conservador' in proc_name_lower or 'clinico' in proc_name_lower or 'clínico' in proc_name_lower)
    is_surgical = any(term in proc_name_lower for term in [
        'artrotomia', 'artroplastia', 'artrodese', 'reconstrucao', 'reconstrução',
        'retirada', 'fixador', 'osteossintese', 'amputacao', 'amputação',
        'desarticulacao', 'desarticulação', 'drenagem', 'sinovectomia',
        'corpo estranho', 'biopsia', 'biópsia', 'revisao', 'revisão'
    ])

    if is_conservative and not is_surgical:
        return 'Tratamento Conservador/Clínico' # Referência provável

    # Cirurgia Grande Porte
    elif any(term in proc_name_lower for term in [
        'artroplastia total', 'artrodese de grandes', 'reconstrucao ligamentar complexa', 'reconstrução ligamentar complexa',
        'amputacao', 'amputação', 'desarticulacao de quadril', 'desarticulação de quadril',
        'desarticulacao de joelho', 'desarticulação de joelho', 'artroplastia de revisao', 'artroplastia de revisão']):
         return 'Cirurgia Grande Porte' # OR ≈ 3.94

    # Procedimentos Específicos (Artrotomia, Drenagem, Corpo Estranho)
    elif any(term in proc_name_lower for term in ['artrotomia', 'drenagem', 'corpo estranho']):
         # Evitar classificar artroplastia/artrodese aqui se já cobertos acima
         if not any(term in proc_name_lower for term in ['artroplastia', 'artrodese']):
              return 'Procedimentos Específicos (Artrot/Dren/CE)' # OR ≈ 3.67

    # Cirurgia Médio/Pequeno Porte (Outras cirurgias não classificadas acima)
    elif is_surgical:
         return 'Cirurgia Médio/Pequeno Porte'

    # Categoria Residual
    else:
        return 'Outros/Não Especificado'

# Aplicar a função para criar a nova coluna
df_analysis['PROC_NOME_agrupado'] = df_analysis['PROC_NOME'].apply(group_procedure)

# Verificar as contagens e categorias resultantes
print("\n   Contagem de Casos por Grupo de Procedimento Agrupado:")
proc_counts = df_analysis['PROC_NOME_agrupado'].value_counts()
print(proc_counts)
# Salvar contagens (opcional)
proc_counts.to_csv(os.path.join(output_dir, 'tabela_contagem_procedimentos.csv'))

# Validar se a categoria de referência existe
reference_category = 'Tratamento Conservador/Clínico'
if reference_category not in df_analysis['PROC_NOME_agrupado'].unique():
    print(f"\n!!! ALERTA !!! A categoria de referência definida '{reference_category}' não foi encontrada nos dados agrupados.")
    print(f"Categorias encontradas: {list(df_analysis['PROC_NOME_agrupado'].unique())}")
    print("Revise a função 'group_procedure' ou a definição de 'reference_category'.")

print("   Agrupamento de procedimentos concluído.")


# =============================================================================
# 7. Análise por Grupo de Procedimento
# =============================================================================
print("\n7. Calculando taxas de readmissão por grupo de procedimento...")

# Calcular taxa de readmissão por grupo
readm_by_proc = df_analysis.groupby('PROC_NOME_agrupado')['readmissao_30d'].mean() * 100

# Exibir taxas ordenadas
print("\n   Taxa de Readmissão (%) por Grupo de Procedimento Agrupado:")
print(readm_by_proc.sort_values(ascending=False))
# Salvar taxas (opcional)
readm_by_proc.sort_values(ascending=False).to_csv(os.path.join(output_dir, 'tabela_taxa_readm_por_procedimento.csv'))

# Preparar dados para gráfico (Figura 4)
readm_by_proc_df = readm_by_proc.reset_index()
readm_by_proc_df.columns = ['PROC_NOME_agrupado', 'Taxa_Readmissao_Perc']

print("   Cálculo de taxas concluído.")


# =============================================================================
# 8. Regressão Logística Multivariada (Modelo Final Conciliado)
# =============================================================================
print("\n8. Ajustando modelo de regressão logística multivariada final...")

# Preparar dataframe para regressão
print("   Preparando dados para regressão...")
regression_cols = ['readmissao_30d', 'IDADE', 'PROC_NOME_agrupado', 'DIAS_PERM']
# Verificar se todas as colunas existem
missing_reg_cols = [col for col in regression_cols if col not in df_analysis.columns]
if missing_reg_cols:
    print(f"ERRO CRÍTICO: Colunas necessárias para regressão não encontradas: {missing_reg_cols}")
    sys.exit(1)

df_regression_final = df_analysis[regression_cols].copy()
initial_rows = len(df_regression_final)
df_regression_final.dropna(inplace=True) # Remover NaNs nas colunas do modelo
rows_after_na = len(df_regression_final)
print(f"      Removidas {initial_rows - rows_after_na} linhas com valores ausentes nas variáveis do modelo.")
print(f"      Número de observações para o modelo: {rows_after_na}")

# Aplicar transformações conforme reconciliação
print("   Aplicando transformações (Idade por Década, LOS Padronizado)...")
# 1. Escalar IDADE por década
df_regression_final['IDADE_decada'] = df_regression_final['IDADE'] / 10.0

# 2. Padronizar (Standardize) DIAS_PERM
scaler_los = StandardScaler()
# fit_transform espera um array 2D
df_regression_final['DIAS_PERM_std'] = scaler_los.fit_transform(df_regression_final[['DIAS_PERM']])

# Converter variável categórica de procedimento
df_regression_final['PROC_NOME_agrupado'] = pd.Categorical(df_regression_final['PROC_NOME_agrupado'])

# Definir a fórmula e ajustar o modelo
# CONFIRME A CATEGORIA DE REFERÊNCIA!
# reference_category já definida na Seção 6
if reference_category not in df_regression_final['PROC_NOME_agrupado'].cat.categories:
    print(f"\nAVISO URGENTE (Regressão): Categoria de referência '{reference_category}' NÃO encontrada.")
    formula_final = "readmissao_30d ~ IDADE_decada + C(PROC_NOME_agrupado) + DIAS_PERM_std"
else:
    formula_final = f"readmissao_30d ~ IDADE_decada + C(PROC_NOME_agrupado, Treatment('{reference_category}')) + DIAS_PERM_std"

print(f"\n   Fórmula utilizada: {formula_final}")

try:
    print("   Ajustando o modelo logístico...")
    logit_model_final = smf.logit(formula_final, data=df_regression_final)
    results_final = logit_model_final.fit()
    print("      Modelo ajustado com sucesso.")

    # Exibir resumo completo do modelo
    print("\n   Resumo Completo do Modelo Logístico Final:")
    print(results_final.summary())

    # Calcular e exibir Odds Ratios
    print("\n   Odds Ratios (OR) e IC 95% - Modelo Final Conciliado:")
    conf_int_final = results_final.conf_int()
    odds_ratios_final = pd.DataFrame({
        'OR': np.exp(results_final.params),
        'Lower CI': np.exp(conf_int_final[0]),
        'Upper CI': np.exp(conf_int_final[1]),
        'p-value': results_final.pvalues
    })
    odds_ratios_final_filtered = odds_ratios_final.drop(index='Intercept')
    print(odds_ratios_final_filtered)
    # Salvar tabela de ORs
    or_table_path = os.path.join(output_dir, 'tabela3_odds_ratios_final.csv')
    odds_ratios_final_filtered.to_csv(or_table_path)
    print(f"\n      Tabela de Odds Ratios salva em '{or_table_path}'")

    # Verificação explícita dos ORs principais contra o artigo
    print("\n   --- Verificação dos ORs vs Artigo ---")
    try:
        or_idade_decada_calc = odds_ratios_final_filtered.loc['IDADE_decada', 'OR']
        ci_idade_decada_lower_calc = odds_ratios_final_filtered.loc['IDADE_decada', 'Lower CI']
        ci_idade_decada_upper_calc = odds_ratios_final_filtered.loc['IDADE_decada', 'Upper CI']
        conciliado_idade = abs(or_idade_decada_calc - 1.21) < 0.015 # Margem pequena
        print(f"   IDADE (por década): OR Calc={or_idade_decada_calc:.3f} (IC 95%: {ci_idade_decada_lower_calc:.3f}-{ci_idade_decada_upper_calc:.3f}) vs Artigo=1.21 -> Conciliado: {'Sim' if conciliado_idade else 'Não'}")
    except KeyError: print("   ERRO: Variável 'IDADE_decada' não encontrada nos resultados.")

    try:
        or_los_std_calc = odds_ratios_final_filtered.loc['DIAS_PERM_std', 'OR']
        ci_los_std_lower_calc = odds_ratios_final_filtered.loc['DIAS_PERM_std', 'Lower CI']
        ci_los_std_upper_calc = odds_ratios_final_filtered.loc['DIAS_PERM_std', 'Upper CI']
        conciliado_los = abs(or_los_std_calc - 0.89) < 0.015 # Margem pequena
        print(f"   TEMPO INTERNAÇÃO (Std): OR Calc={or_los_std_calc:.3f} (IC 95%: {ci_los_std_lower_calc:.3f}-{ci_los_std_upper_calc:.3f}) vs Artigo=0.89 -> Conciliado: {'Sim' if conciliado_los else 'Não'}")
    except KeyError: print("   ERRO: Variável 'DIAS_PERM_std' não encontrada nos resultados.")

    # Preparar dados para Forest Plot (Seção 9.3)
    print("\n   Preparando dados para Forest Plot...")
    or_for_plot_final = odds_ratios_final_filtered.copy()
    rename_map_final = {
         f"C(PROC_NOME_agrupado, Treatment('{reference_category}'))[T.Cirurgia Grande Porte]": "Cirurgia Grande Porte",
         f"C(PROC_NOME_agrupado, Treatment('{reference_category}'))[T.Procedimentos Específicos (Artrot/Dren/CE)]": "Procedimentos Específicos",
         f"C(PROC_NOME_agrupado, Treatment('{reference_category}'))[T.Cirurgia Médio/Pequeno Porte]": "Cirurgia Médio/Pequeno Porte",
         f"C(PROC_NOME_agrupado, Treatment('{reference_category}'))[T.Outros/Não Especificado]": "Outros/Não Especificado",
         "IDADE_decada": "Idade (por década)",
         "DIAS_PERM_std": "Tempo Internação (Std)"
    }
    or_for_plot_final.index = or_for_plot_final.index.map(lambda x: rename_map_final.get(x, x))
    vars_to_plot_final = list(rename_map_final.values()) # Plot all transformed variables
    or_for_plot = or_for_plot_final.loc[or_for_plot_final.index.intersection(vars_to_plot_final)].copy()
    print("      Dados para Forest Plot preparados.")
    plot_data_ready = True

except Exception as e:
    print(f"\nERRO CRÍTICO ao ajustar o modelo de regressão final: {e}")
    print("Verifique a fórmula, as variáveis de entrada e a categoria de referência.")
    results_final = None
    or_for_plot = None
    plot_data_ready = False

print("   Ajuste do modelo logístico concluído.")


# =============================================================================
# 9. Avaliação do Modelo e Geração de Figuras Finais
# =============================================================================
print("\n9. Avaliando modelo e gerando figuras finais...")

# --- 9.1 Curva ROC e AUC (Figura 6) ---
if results_final: # Procede somente se o modelo foi ajustado
    print("   Calculando e plotando Curva ROC (Figura 6)...")
    try:
        predicted_probabilities = results_final.predict(df_regression_final)
        fpr, tpr, thresholds = roc_curve(df_regression_final['readmissao_30d'], predicted_probabilities)
        roc_auc = auc(fpr, tpr)
        print(f"      Área Sob a Curva ROC (AUC): {roc_auc:.3f}") # Deve ser ~0.682

        plt.figure(figsize=(8, 8))
        plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'Curva ROC (AUC = {roc_auc:.3f})')
        plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--', label='Referência (AUC = 0.5)')
        plt.xlim([0.0, 1.0])
        plt.ylim([0.0, 1.05])
        plt.xlabel('Taxa de Falsos Positivos (1 - Especificidade)')
        plt.ylabel('Taxa de Verdadeiros Positivos (Sensibilidade)')
        plt.title('Figura 6: Curva ROC para Predição de Readmissão')
        plt.legend(loc="lower right")
        plt.grid(alpha=0.4, linestyle='--')
        plt.tight_layout()
        fig6_path_png = os.path.join(output_dir, 'figura6_roc_curve.png')
        fig6_path_tiff = os.path.join(output_dir, 'figura6_roc_curve.tiff')
        plt.savefig(fig6_path_png, dpi=300)
        plt.savefig(fig6_path_tiff, dpi=300)
        print(f"      Figura 6 salva em '{fig6_path_png}' e '{fig6_path_tiff}'")
        # plt.show()
        plt.close()
    except Exception as e:
        print(f"      ERRO ao gerar Curva ROC: {e}")
else:
    print("   Modelo logístico não foi ajustado. Pulando cálculo da ROC/AUC.")


# --- 9.2 Volume de Casos por Procedimento (Figura 3) ---
print("\n   Gerando Figura 3: Volume de Casos por Procedimento...")
# proc_counts foi calculado na Seção 6
if 'proc_counts' in locals() and not proc_counts.empty:
    plt.figure(figsize=(10, 7)) # Ajustado
    bars = plt.bar(proc_counts.index, proc_counts.values, color=sns.color_palette("viridis", len(proc_counts)))
    plt.title('Figura 3: Volume de Casos por Grupo de Procedimento', pad=15, fontsize=14)
    plt.xlabel('Grupo de Procedimento', fontsize=12)
    plt.ylabel('Número de Casos', fontsize=12)
    plt.xticks(rotation=45, ha='right', fontsize=10)
    plt.yticks(fontsize=10)
    plt.grid(True, axis='y', linestyle='--', alpha=0.6)

    for bar in bars:
        yval = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2.0, yval, f'{int(yval)}', ha='center', va='bottom', fontsize=9, fontweight='bold')

    plt.tight_layout(pad=1.5)
    fig3_path_png = os.path.join(output_dir, 'figura3_volume_procedimentos.png')
    fig3_path_tiff = os.path.join(output_dir, 'figura3_volume_procedimentos.tiff')
    plt.savefig(fig3_path_png, dpi=300)
    plt.savefig(fig3_path_tiff, dpi=300)
    print(f"      Figura 3 salva em '{fig3_path_png}' e '{fig3_path_tiff}'")
    # plt.show()
    plt.close()
else:
    print("      ERRO: Dados de contagem de procedimentos ('proc_counts') não disponíveis.")


# --- 9.3 Taxa de Readmissão por Procedimento (Figura 4) ---
print("\n   Gerando Figura 4: Taxa de Readmissão por Procedimento...")
# readm_by_proc_df foi calculado na Seção 7
if 'readm_by_proc_df' in locals() and not readm_by_proc_df.empty:
    readm_by_proc_df_sorted = readm_by_proc_df.sort_values('Taxa_Readmissao_Perc', ascending=False)
    plt.figure(figsize=(10, 7))
    bars = plt.bar(readm_by_proc_df_sorted['PROC_NOME_agrupado'], readm_by_proc_df_sorted['Taxa_Readmissao_Perc'], color=sns.color_palette("magma", len(readm_by_proc_df_sorted)))
    plt.title('Figura 4: Taxa de Readmissão (%) por Grupo de Procedimento', pad=15, fontsize=14)
    plt.xlabel('Grupo de Procedimento', fontsize=12)
    plt.ylabel('Taxa de Readmissão (%)', fontsize=12)
    plt.xticks(rotation=45, ha='right', fontsize=10)
    plt.yticks(fontsize=10)
    plt.grid(True, axis='y', linestyle='--', alpha=0.6)
    plt.ylim(0, max(readm_by_proc_df_sorted['Taxa_Readmissao_Perc']) * 1.18) # Espaço para rótulos

    for bar in bars:
        yval = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2.0, yval, f'{yval:.2f}%', ha='center', va='bottom', fontsize=9, fontweight='bold')

    plt.tight_layout(pad=1.5)
    fig4_path_png = os.path.join(output_dir, 'figura4_taxa_readm_procedimentos.png')
    fig4_path_tiff = os.path.join(output_dir, 'figura4_taxa_readm_procedimentos.tiff')
    plt.savefig(fig4_path_png, dpi=300)
    plt.savefig(fig4_path_tiff, dpi=300)
    print(f"      Figura 4 salva em '{fig4_path_png}' e '{fig4_path_tiff}'")
    # plt.show()
    plt.close()
else:
     print("      ERRO: Dados de taxa de readmissão por procedimento ('readm_by_proc_df') não disponíveis.")


# --- 9.4 Forest Plot (Figura 5) ---
print("\n   Gerando Figura 5: Forest Plot...")
# Usa 'or_for_plot' preparado na Seção 8
if plot_data_ready and or_for_plot is not None and not or_for_plot.empty:
    try:
        or_for_plot_sorted = or_for_plot.sort_values('OR')
        plt.figure(figsize=(10, 7))
        y_pos = np.arange(len(or_for_plot_sorted))
        plt.errorbar(x=or_for_plot_sorted['OR'], y=y_pos,
                     xerr=[or_for_plot_sorted['OR'] - or_for_plot_sorted['Lower CI'],
                           or_for_plot_sorted['Upper CI'] - or_for_plot_sorted['OR']],
                     fmt='o', color='#003366', ecolor='#888888', capsize=5, capthick=1.5,
                     markersize=7, elinewidth=1.5, label='Odds Ratio (IC 95%)')

        plt.axvline(x=1, color='#990000', linestyle='--', alpha=0.8, label='Referência (OR=1)')
        plt.yticks(y_pos, or_for_plot_sorted.index, fontsize=10)
        plt.xlabel('Odds Ratio (Escala Logarítmica)', fontsize=12)
        plt.ylabel('Fator de Risco', fontsize=12)
        plt.title('Figura 5: Forest Plot dos Fatores de Risco para Readmissão', pad=15, fontsize=14)
        plt.xscale('log') # Escala logarítmica é padrão para Forest Plots
        plt.grid(True, axis='x', linestyle=':', alpha=0.5)
        plt.legend(fontsize=10)
        plt.tight_layout(pad=1.5)
        fig5_path_png = os.path.join(output_dir, 'figura5_forest_plot_readmissao.png')
        fig5_path_tiff = os.path.join(output_dir, 'figura5_forest_plot_readmissao.tiff')
        plt.savefig(fig5_path_png, dpi=300)
        plt.savefig(fig5_path_tiff, dpi=300)
        print(f"      Figura 5 salva em '{fig5_path_png}' e '{fig5_path_tiff}'")
        # plt.show()
        plt.close()
    except Exception as e:
        print(f"      ERRO ao gerar Forest Plot: {e}")
        print("      Verifique se 'or_for_plot' foi criado corretamente na seção 8.")

elif not plot_data_ready:
     print("      ERRO: Dados para Forest Plot ('or_for_plot') não foram preparados devido a erro na regressão.")
else:
     print("      ERRO: DataFrame 'or_for_plot' vazio ou não definido. Pulando Forest Plot.")

print("   Geração de figuras concluída.")


# =============================================================================
# 10. Conclusão do Script
# =============================================================================
print("\n10. Análise concluída.")
print(f"    Resultados e figuras foram salvos no diretório: '{output_dir}'")
print("    Verifique os arquivos gerados e os resultados impressos no console.")
print("    Lembre-se de revisar a função de agrupamento de procedimentos e a categoria de referência.")
